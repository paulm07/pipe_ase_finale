
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 30 02:03:55 EDT 2017
//----------------------------------------------------

package formula.parser;

import formula.absyntree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 30 02:03:55 EDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\005" +
    "\000\002\004\004\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\006\012\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\026\005\000\002\026\006\000\002\010\004\000" +
    "\002\011\004\000\002\012\002\000\002\012\004\000\002" +
    "\013\003\000\002\013\005\000\002\013\003\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\007\000\002\016\011\000\002\027\014\000\002" +
    "\017\003\000\002\017\006\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\025\003\000\002" +
    "\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\036\006\013\020\033\026\005\027\035\030" +
    "\010\041\020\042\021\047\031\051\017\052\034\053\040" +
    "\054\025\055\022\056\037\001\002\000\014\002\000\004" +
    "\137\005\140\007\135\010\134\001\002\000\004\055\uffcb" +
    "\001\002\000\066\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\040\ufff4\043\ufff4" +
    "\045\ufff4\046\ufff4\001\002\000\020\002\ufffe\004\ufffe\005" +
    "\ufffe\007\ufffe\010\ufffe\040\ufffe\043\ufffe\001\002\000\004" +
    "\055\uffc9\001\002\000\066\002\uffef\004\uffef\005\uffef\007" +
    "\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\036\uffef\040\uffef" +
    "\043\uffef\045\uffef\046\uffef\001\002\000\066\002\uffe8\004" +
    "\uffe8\005\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\036\uffe8\040\uffe8\043\uffe8\045\uffe8\046\uffe8\001\002\000" +
    "\036\006\013\020\033\026\005\027\035\030\010\041\020" +
    "\042\021\047\031\051\017\052\034\053\040\054\025\055" +
    "\022\056\037\001\002\000\066\002\ufff0\004\ufff0\005\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\036\ufff0\040" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\001\002\000\020\002\ufffd" +
    "\004\ufffd\005\ufffd\007\ufffd\010\ufffd\040\ufffd\043\ufffd\001" +
    "\002\000\066\002\ufff1\004\ufff1\005\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\036\ufff1\040\ufff1\043\ufff1\045" +
    "\ufff1\046\ufff1\001\002\000\066\002\uffc6\004\uffc6\005\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\040" +
    "\uffc6\043\uffc6\045\uffc6\046\uffc6\001\002\000\036\006\013" +
    "\020\033\026\005\027\035\030\010\041\020\042\021\047" +
    "\031\051\017\052\034\053\040\054\025\055\022\056\037" +
    "\001\002\000\030\020\033\037\163\041\042\042\021\047" +
    "\031\051\017\052\034\053\040\054\025\055\022\056\037" +
    "\001\002\000\072\002\uffce\004\uffce\005\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\022\uffce\023\uffce\024\uffce\025\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\036\uffce\037\145\040\uffce" +
    "\041\152\043\uffce\045\uffce\046\uffce\001\002\000\004\002" +
    "\151\001\002\000\066\002\ufff2\004\ufff2\005\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\040\ufff2\043" +
    "\ufff2\045\ufff2\046\ufff2\001\002\000\066\002\uffc4\004\uffc4" +
    "\005\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\036" +
    "\uffc4\040\uffc4\043\uffc4\045\uffc4\046\uffc4\001\002\000\066" +
    "\002\uffe4\004\uffe4\005\uffe4\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\036\uffe4\040\uffe4\043\uffe4\045\uffe4\046\uffe4" +
    "\001\002\000\066\002\uffe6\004\uffe6\005\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6\040\uffe6\043\uffe6" +
    "\045\uffe6\046\uffe6\001\002\000\004\055\122\001\002\000" +
    "\004\041\111\001\002\000\060\002\ufffa\004\ufffa\005\ufffa" +
    "\007\ufffa\010\ufffa\011\052\012\051\013\054\014\061\015" +
    "\062\016\063\017\053\020\044\022\060\023\050\024\055" +
    "\025\057\031\046\032\045\033\047\034\056\040\ufffa\043" +
    "\ufffa\001\002\000\026\020\033\041\042\042\021\047\031" +
    "\051\017\052\034\053\040\054\025\055\022\056\037\001" +
    "\002\000\066\002\uffc5\004\uffc5\005\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\043\uffc5\045" +
    "\uffc5\046\uffc5\001\002\000\004\055\uffca\001\002\000\066" +
    "\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\036\ufff3\040\ufff3\043\ufff3\045\ufff3\046\ufff3" +
    "\001\002\000\066\002\uffc3\004\uffc3\005\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\040\uffc3\043\uffc3" +
    "\045\uffc3\046\uffc3\001\002\000\066\002\uffc2\004\uffc2\005" +
    "\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\040\uffc2\043\uffc2\045\uffc2\046\uffc2\001\002\000\020\002" +
    "\uffff\004\uffff\005\uffff\007\uffff\010\uffff\040\uffff\043\uffff" +
    "\001\002\000\026\020\033\041\042\042\021\047\031\051" +
    "\017\052\034\053\040\054\025\055\022\056\037\001\002" +
    "\000\066\002\uffd5\004\uffd5\005\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\036\uffd5\040\uffd5\043\uffd5\045\uffd5" +
    "\046\uffd5\001\002\000\026\020\033\041\042\042\021\047" +
    "\031\051\017\052\034\053\040\054\025\055\022\056\037" +
    "\001\002\000\026\020\033\041\042\042\021\047\031\051" +
    "\017\052\034\053\040\054\025\055\022\056\037\001\002" +
    "\000\026\020\033\041\042\042\021\047\031\051\017\052" +
    "\034\053\040\054\025\055\022\056\037\001\002\000\026" +
    "\020\033\041\042\042\021\047\031\051\017\052\034\053" +
    "\040\054\025\055\022\056\037\001\002\000\026\020\033" +
    "\041\042\042\021\047\031\051\017\052\034\053\040\054" +
    "\025\055\022\056\037\001\002\000\026\020\033\041\042" +
    "\042\021\047\031\051\017\052\034\053\040\054\025\055" +
    "\022\056\037\001\002\000\026\020\033\041\042\042\021" +
    "\047\031\051\017\052\034\053\040\054\025\055\022\056" +
    "\037\001\002\000\026\020\033\041\042\042\021\047\031" +
    "\051\017\052\034\053\040\054\025\055\022\056\037\001" +
    "\002\000\026\020\033\041\042\042\021\047\031\051\017" +
    "\052\034\053\040\054\025\055\022\056\037\001\002\000" +
    "\026\020\033\041\042\042\021\047\031\051\017\052\034" +
    "\053\040\054\025\055\022\056\037\001\002\000\026\020" +
    "\033\041\042\042\021\047\031\051\017\052\034\053\040" +
    "\054\025\055\022\056\037\001\002\000\026\020\033\041" +
    "\042\042\021\047\031\051\017\052\034\053\040\054\025" +
    "\055\022\056\037\001\002\000\026\020\033\041\042\042" +
    "\021\047\031\051\017\052\034\053\040\054\025\055\022" +
    "\056\037\001\002\000\026\020\033\041\042\042\021\047" +
    "\031\051\017\052\034\053\040\054\025\055\022\056\037" +
    "\001\002\000\026\020\033\041\042\042\021\047\031\051" +
    "\017\052\034\053\040\054\025\055\022\056\037\001\002" +
    "\000\026\020\033\041\042\042\021\047\031\051\017\052" +
    "\034\053\040\054\025\055\022\056\037\001\002\000\066" +
    "\002\uffde\004\uffde\005\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\053\020\044" +
    "\022\060\023\050\024\055\025\057\031\046\032\045\033" +
    "\047\034\056\036\uffde\040\uffde\043\uffde\045\uffde\046\uffde" +
    "\001\002\000\066\002\uffdf\004\uffdf\005\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\053\020\044\022\060\023\050\024\055\025\057\031" +
    "\046\032\045\033\047\034\056\036\uffdf\040\uffdf\043\uffdf" +
    "\045\uffdf\046\uffdf\001\002\000\066\002\uffe0\004\uffe0\005" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\053\020\044\022\060\023\050\024" +
    "\055\025\057\031\046\032\045\033\047\034\056\036\uffe0" +
    "\040\uffe0\043\uffe0\045\uffe0\046\uffe0\001\002\000\066\002" +
    "\uffd9\004\uffd9\005\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\022" +
    "\uffd9\023\uffd9\024\uffd9\025\057\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\040\uffd9\043\uffd9\045\uffd9\046\uffd9\001" +
    "\002\000\066\002\uffd6\004\uffd6\005\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\001\002\000\066\002\uffd3\004\uffd3\005\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\053\020\044\022\060\023\050\024\055" +
    "\025\057\031\046\032\045\033\uffd3\034\uffd3\036\uffd3\040" +
    "\uffd3\043\uffd3\045\uffd3\046\uffd3\001\002\000\066\002\uffd8" +
    "\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\025\057\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\036\uffd8\040\uffd8\043\uffd8\045\uffd8\046\uffd8\001\002" +
    "\000\066\002\uffe1\004\uffe1\005\uffe1\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\053" +
    "\020\044\022\060\023\050\024\055\025\057\031\046\032" +
    "\045\033\047\034\056\036\uffe1\040\uffe1\043\uffe1\045\uffe1" +
    "\046\uffe1\001\002\000\066\002\uffda\004\uffda\005\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\022\060\023\uffda\024\055\025" +
    "\057\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\040\uffda" +
    "\043\uffda\045\uffda\046\uffda\001\002\000\066\002\uffe3\004" +
    "\uffe3\005\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\054" +
    "\014\061\015\062\016\063\017\053\020\044\022\060\023" +
    "\050\024\055\025\057\031\046\032\045\033\047\034\056" +
    "\036\uffe3\040\uffe3\043\uffe3\045\uffe3\046\uffe3\001\002\000" +
    "\066\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\054\014\061\015\062\016\063\017\053\020" +
    "\044\022\060\023\050\024\055\025\057\031\046\032\045" +
    "\033\047\034\056\036\uffe2\040\uffe2\043\uffe2\045\uffe2\046" +
    "\uffe2\001\002\000\066\002\uffd7\004\uffd7\005\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\020\uffd7\022\060\023\uffd7\024\055\025\057" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\040\uffd7\043" +
    "\uffd7\045\uffd7\046\uffd7\001\002\000\066\002\uffd4\004\uffd4" +
    "\005\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\053\020\044\022\060\023\050" +
    "\024\055\025\057\031\046\032\045\033\uffd4\034\056\036" +
    "\uffd4\040\uffd4\043\uffd4\045\uffd4\046\uffd4\001\002\000\066" +
    "\002\uffdd\004\uffdd\005\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\053\020\044" +
    "\022\060\023\050\024\055\025\057\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\036\uffdd\040\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\001\002\000\066\002\uffdc\004\uffdc\005\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\017\053\020\044\022\060\023\050\024\055\025\057\031" +
    "\046\032\uffdc\033\uffdc\034\uffdc\036\uffdc\040\uffdc\043\uffdc" +
    "\045\uffdc\046\uffdc\001\002\000\066\002\uffdb\004\uffdb\005" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\022\060\023\uffdb\024" +
    "\055\025\057\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\040\uffdb\043\uffdb\045\uffdb\046\uffdb\001\002\000\054\004" +
    "\uffe8\005\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\040\110\001\002\000\054\004\uffe6\005\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\040\107\001\002\000\042" +
    "\011\052\012\051\013\054\014\061\015\062\016\063\017" +
    "\053\020\044\022\060\023\050\024\055\025\057\031\046" +
    "\032\045\033\047\034\056\001\002\000\066\002\uffe5\004" +
    "\uffe5\005\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\036\uffe5\040\uffe5\043\uffe5\045\uffe5\046\uffe5\001\002\000" +
    "\066\002\uffe7\004\uffe7\005\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\031\uffe7\032\uffe7" +
    "\033\uffe7\034\uffe7\036\uffe7\040\uffe7\043\uffe7\045\uffe7\046" +
    "\uffe7\001\002\000\026\020\033\041\042\042\021\047\031" +
    "\051\017\052\034\053\040\054\025\055\022\056\037\001" +
    "\002\000\044\011\052\012\051\013\054\014\061\015\062" +
    "\016\063\017\053\020\044\022\060\023\050\024\055\025" +
    "\057\031\046\032\045\033\047\034\056\045\113\001\002" +
    "\000\026\020\033\041\042\042\021\047\031\051\017\052" +
    "\034\053\040\054\025\055\022\056\037\001\002\000\044" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\045\115\001\002\000\026\020" +
    "\033\041\042\042\021\047\031\051\017\052\034\053\040" +
    "\054\025\055\022\056\037\001\002\000\044\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\034\ufff1\040\117\001\002\000\004\050\120\001\002" +
    "\000\004\055\121\001\002\000\066\002\uffcf\004\uffcf\005" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf" +
    "\040\uffcf\043\uffcf\045\uffcf\046\uffcf\001\002\000\006\031" +
    "\uffcc\032\uffcc\001\002\000\006\031\124\032\126\001\002" +
    "\000\004\055\uffc8\001\002\000\004\055\127\001\002\000" +
    "\004\055\uffc7\001\002\000\010\035\uffce\037\145\044\uffce" +
    "\001\002\000\004\044\131\001\002\000\004\041\132\001" +
    "\002\000\036\006\013\020\033\026\005\027\035\030\010" +
    "\041\020\042\021\047\031\051\017\052\034\053\040\054" +
    "\025\055\022\056\037\001\002\000\014\004\137\005\140" +
    "\007\135\010\134\040\136\001\002\000\036\006\013\020" +
    "\033\026\005\027\035\030\010\041\020\042\021\047\031" +
    "\051\017\052\034\053\040\054\025\055\022\056\037\001" +
    "\002\000\036\006\013\020\033\026\005\027\035\030\010" +
    "\041\020\042\021\047\031\051\017\052\034\053\040\054" +
    "\025\055\022\056\037\001\002\000\020\002\ufff5\004\ufff5" +
    "\005\ufff5\007\ufff5\010\ufff5\040\ufff5\043\ufff5\001\002\000" +
    "\036\006\013\020\033\026\005\027\035\030\010\041\020" +
    "\042\021\047\031\051\017\052\034\053\040\054\025\055" +
    "\022\056\037\001\002\000\036\006\013\020\033\026\005" +
    "\027\035\030\010\041\020\042\021\047\031\051\017\052" +
    "\034\053\040\054\025\055\022\056\037\001\002\000\020" +
    "\002\ufff8\004\ufff8\005\ufff8\007\135\010\134\040\ufff8\043" +
    "\ufff8\001\002\000\020\002\ufff9\004\ufff9\005\140\007\135" +
    "\010\134\040\ufff9\043\ufff9\001\002\000\020\002\ufff7\004" +
    "\ufff7\005\ufff7\007\ufff7\010\ufff7\040\ufff7\043\ufff7\001\002" +
    "\000\020\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\040" +
    "\ufff6\043\ufff6\001\002\000\004\054\146\001\002\000\004" +
    "\036\uffc1\001\002\000\004\036\150\001\002\000\072\002" +
    "\uffcd\004\uffcd\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\040\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\001\002\000\004\002\001\001\002\000\030" +
    "\020\033\040\153\041\042\042\021\047\031\051\017\052" +
    "\034\053\040\054\025\055\022\056\037\001\002\000\066" +
    "\002\uffee\004\uffee\005\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\036\uffee\040\uffee\043\uffee\045\uffee\046\uffee" +
    "\001\002\000\004\040\162\001\002\000\050\011\052\012" +
    "\051\013\054\014\061\015\062\016\063\017\053\020\044" +
    "\022\060\023\050\024\055\025\057\031\046\032\045\033" +
    "\047\034\056\036\uffea\040\uffea\045\uffea\001\002\000\010" +
    "\036\uffec\040\uffec\045\157\001\002\000\026\020\033\041" +
    "\042\042\021\047\031\051\017\052\034\053\040\054\025" +
    "\055\022\056\037\001\002\000\010\036\uffe9\040\uffe9\045" +
    "\uffe9\001\002\000\050\011\052\012\051\013\054\014\061" +
    "\015\062\016\063\017\053\020\044\022\060\023\050\024" +
    "\055\025\057\031\046\032\045\033\047\034\056\036\uffeb" +
    "\040\uffeb\045\uffeb\001\002\000\066\002\uffed\004\uffed\005" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\031\uffed\032\uffed\033\uffed\034\uffed\036\uffed" +
    "\040\uffed\043\uffed\045\uffed\046\uffed\001\002\000\026\020" +
    "\033\041\042\042\021\047\031\051\017\052\034\053\040" +
    "\054\025\055\022\056\037\001\002\000\046\011\052\012" +
    "\051\013\054\014\061\015\062\016\063\017\053\020\044" +
    "\022\060\023\050\024\055\025\057\031\046\032\045\033" +
    "\047\034\056\043\165\046\166\001\002\000\066\002\uffd2" +
    "\004\uffd2\005\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\036\uffd2\040\uffd2\043\uffd2\045\uffd2\046\uffd2\001\002" +
    "\000\004\055\127\001\002\000\004\035\170\001\002\000" +
    "\036\006\013\020\033\026\005\027\035\030\010\041\020" +
    "\042\021\047\031\051\017\052\034\053\040\054\025\055" +
    "\022\056\037\001\002\000\014\004\137\005\140\007\135" +
    "\010\134\043\172\001\002\000\066\002\uffd0\004\uffd0\005" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\040\uffd0\043\uffd0\045\uffd0\046\uffd0\001\002\000\004\036" +
    "\174\001\002\000\004\043\175\001\002\000\066\002\uffd1" +
    "\004\uffd1\005\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\036\uffd1\040\uffd1\043\uffd1\045\uffd1\046\uffd1\001\002" +
    "\000\014\004\137\005\140\007\135\010\134\040\177\001" +
    "\002\000\020\002\ufffc\004\ufffc\005\ufffc\007\ufffc\010\ufffc" +
    "\040\ufffc\043\ufffc\001\002\000\020\002\ufffb\004\ufffb\005" +
    "\ufffb\007\135\010\134\040\ufffb\043\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\042\002\022\003\003\004\040\005\006\006" +
    "\014\007\031\013\015\014\026\015\011\016\025\017\035" +
    "\021\027\023\005\025\023\026\013\027\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\177\004\040\005\006\006\014\007\031" +
    "\013\015\014\026\015\011\016\025\017\035\021\027\023" +
    "\005\025\023\026\013\027\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\175\004\040\005\006\006\014\007\031\013\015" +
    "\014\104\015\103\016\025\017\035\021\027\023\005\025" +
    "\023\026\013\027\010\001\001\000\026\007\163\013\015" +
    "\014\026\015\011\016\025\017\035\023\005\025\023\026" +
    "\013\027\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\042\013\015\014\026\015" +
    "\011\016\025\017\035\023\005\025\023\026\013\027\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\105\013\015\014\104\015\103\016\025\017" +
    "\035\023\005\025\023\026\013\027\010\001\001\000\002" +
    "\001\001\000\026\007\102\013\015\014\026\015\011\016" +
    "\025\017\035\023\005\025\023\026\013\027\010\001\001" +
    "\000\026\007\101\013\015\014\026\015\011\016\025\017" +
    "\035\023\005\025\023\026\013\027\010\001\001\000\026" +
    "\007\100\013\015\014\026\015\011\016\025\017\035\023" +
    "\005\025\023\026\013\027\010\001\001\000\026\007\077" +
    "\013\015\014\026\015\011\016\025\017\035\023\005\025" +
    "\023\026\013\027\010\001\001\000\026\007\076\013\015" +
    "\014\026\015\011\016\025\017\035\023\005\025\023\026" +
    "\013\027\010\001\001\000\026\007\075\013\015\014\026" +
    "\015\011\016\025\017\035\023\005\025\023\026\013\027" +
    "\010\001\001\000\026\007\074\013\015\014\026\015\011" +
    "\016\025\017\035\023\005\025\023\026\013\027\010\001" +
    "\001\000\026\007\073\013\015\014\026\015\011\016\025" +
    "\017\035\023\005\025\023\026\013\027\010\001\001\000" +
    "\026\007\072\013\015\014\026\015\011\016\025\017\035" +
    "\023\005\025\023\026\013\027\010\001\001\000\026\007" +
    "\071\013\015\014\026\015\011\016\025\017\035\023\005" +
    "\025\023\026\013\027\010\001\001\000\026\007\070\013" +
    "\015\014\026\015\011\016\025\017\035\023\005\025\023" +
    "\026\013\027\010\001\001\000\026\007\067\013\015\014" +
    "\026\015\011\016\025\017\035\023\005\025\023\026\013" +
    "\027\010\001\001\000\026\007\066\013\015\014\026\015" +
    "\011\016\025\017\035\023\005\025\023\026\013\027\010" +
    "\001\001\000\026\007\065\013\015\014\026\015\011\016" +
    "\025\017\035\023\005\025\023\026\013\027\010\001\001" +
    "\000\026\007\064\013\015\014\026\015\011\016\025\017" +
    "\035\023\005\025\023\026\013\027\010\001\001\000\026" +
    "\007\063\013\015\014\026\015\011\016\025\017\035\023" +
    "\005\025\023\026\013\027\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\111\013\015\014\026\015\011\016" +
    "\025\017\035\023\005\025\023\026\013\027\010\001\001" +
    "\000\002\001\001\000\026\007\105\013\113\014\026\015" +
    "\011\016\025\017\035\023\005\025\023\026\013\027\010" +
    "\001\001\000\002\001\001\000\026\007\105\013\115\014" +
    "\026\015\011\016\025\017\035\023\005\025\023\026\013" +
    "\027\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\124\001\001\000\002\001\001\000\004\017\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\003\132\004\040\005\006\006" +
    "\014\007\031\013\015\014\026\015\011\016\025\017\035" +
    "\021\027\023\005\025\023\026\013\027\010\001\001\000" +
    "\002\001\001\000\040\003\143\004\040\005\006\006\014" +
    "\007\031\013\015\014\026\015\011\016\025\017\035\021" +
    "\027\023\005\025\023\026\013\027\010\001\001\000\040" +
    "\003\142\004\040\005\006\006\014\007\031\013\015\014" +
    "\026\015\011\016\025\017\035\021\027\023\005\025\023" +
    "\026\013\027\010\001\001\000\002\001\001\000\040\003" +
    "\141\004\040\005\006\006\014\007\031\013\015\014\026" +
    "\015\011\016\025\017\035\021\027\023\005\025\023\026" +
    "\013\027\010\001\001\000\040\003\140\004\040\005\006" +
    "\006\014\007\031\013\015\014\026\015\011\016\025\017" +
    "\035\021\027\023\005\025\023\026\013\027\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\154\010\153\013\015\014\026\015\011\016\025" +
    "\017\035\023\005\025\023\026\013\027\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\155\001\001" +
    "\000\004\011\157\001\001\000\026\007\160\013\015\014" +
    "\026\015\011\016\025\017\035\023\005\025\023\026\013" +
    "\027\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\154\010\172\013\015\014\026" +
    "\015\011\016\025\017\035\023\005\025\023\026\013\027" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\166\001\001\000\002\001\001\000\040\003\170\004" +
    "\040\005\006\006\014\007\031\013\015\014\026\015\011" +
    "\016\025\017\035\021\027\023\005\025\023\026\013\027" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ErrorMsg errorMsg;
	public parser(java_cup.runtime.Scanner scan, ErrorMsg err) {
		this(scan);
		errorMsg = err;
	}
	public void syntax_error(java_cup.runtime.Symbol current) {
	    report_error("Syntax error (" + current.sym + ")", current);
	}

	public void report_error(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // index ::= NUM 
            {
              Index RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Index(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // empty ::= EMPTY 
            {
              Empty RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Empty(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // constant ::= STR 
            {
              Constant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StrConstant(sleft, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // constant ::= NUM 
            {
              Constant RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumConstant(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constant ::= FALSE 
            {
              Constant RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // constant ::= TRUE 
            {
              Constant RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // domain ::= NIN 
            {
              Domain RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nin(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // domain ::= IN 
            {
              Domain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new In(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // quantifier ::= NEXISTS 
            {
              Quantifier RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nexists(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // quantifier ::= EXISTS 
            {
              Quantifier RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exists(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // quantifier ::= FORALL 
            {
              Quantifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForAll(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // userVariable ::= ID 
            {
              UserVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable ::= ID LBRACK index RBRACK 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Index idx = (Index)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVariable(ileft, new Identifier(i), idx); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable ::= ID 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // integral_exp ::= INTEGRAL LPAREN term COMMA exp COMMA exp RPAREN DIFFERENTIAL ID 
            {
              IntegralTerm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp l = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp u = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegralTerm(ileft, t, l, u, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("integral_exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // set_exp ::= LBRACE term COLON variable SETDEF formula RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Term u = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula sf = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Setdef(sleft, u, v, sf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // set_exp ::= LBRACE LBRACK terms RBRACK RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Terms ts = (Terms)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new BraceTerms(lleft, ts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // set_exp ::= LBRACE term RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BraceTerm(lleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // set_exp ::= term DIFF term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diff(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // set_exp ::= term UNION term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Union(uleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arith_exp ::= MINUS term 
            {
              ArithExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegExp(mleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arith_exp ::= term POWER term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Power(pleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arith_exp ::= term MOD term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mod(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arith_exp ::= term DIV term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arith_exp ::= term MUL term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mul(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arith_exp ::= term PLUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(pleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arith_exp ::= term MINUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rel_exp ::= term NIN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NinRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel_exp ::= term IN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InRel(ileft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel_exp ::= term LEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeqRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel_exp ::= term GEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeqRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel_exp ::= term LT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel_exp ::= term GT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_exp ::= term NEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeqRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_exp ::= term EQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqRel(eleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= set_exp 
            {
              Exp RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SetExp se = (SetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SExp(seleft, se); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= LPAREN rel_exp RPAREN 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		RelExp re = (RelExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RExp(releft, re, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= rel_exp 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelExp re = (RelExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RExp(releft, re); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= LPAREN arith_exp RPAREN 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithExp ae = (ArithExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AExp(aeleft, ae, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= arith_exp 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithExp ae = (ArithExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AExp(aeleft, ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termRests ::= termRests termRest 
            {
              TermRestList RESULT =null;
		int trsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermRestList trs = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRest tr = (TermRest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 trs.addElement(tr); RESULT = trs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termRests ::= 
            {
              TermRestList RESULT =null;
		 RESULT = new TermRestList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termRest ::= COMMA term 
            {
              TermRest RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TermRest(cleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRest",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // terms ::= term termRests 
            {
              Terms RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRestList tr = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terms(tleft, t, tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= ID LPAREN terms RPAREN 
            {
              FunctionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Terms t = (Terms)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionExp(n, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= ID LPAREN RPAREN 
            {
              FunctionExp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionExp(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term ::= integral_exp 
            {
              Term RESULT =null;
		int ieleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ieright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntegralTerm ie = (IntegralTerm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ie; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term ::= function 
            {
              Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionExp f = (FunctionExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTerm(fleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term ::= exp 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= empty 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Empty e = (Empty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EmptyTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= variable 
            {
              Term RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableTerm(vleft, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= constant 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantTerm(cleft, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // complexFormula ::= quantifier userVariable domain variable DOT LPAREN formula RPAREN 
            {
              ComplexFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Quantifier q = (Quantifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		UserVariable u = (UserVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Domain d = (Domain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComplexFormula(qleft, q, u, d, v, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complexFormula",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compoundFormula ::= formula EQUIV formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EquivFormula(eleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compoundFormula ::= formula IMP formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ImpFormula(ileft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compoundFormula ::= formula OR formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrFormula(oleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compoundFormula ::= formula AND formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndFormula(aleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atomicFormula ::= term 
            {
              AtomicFormula RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomicTerm(tleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicFormula ::= NOT formula 
            {
              AtomicFormula RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotFormula(nleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula ::= LPAREN formula RPAREN 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula ::= complexFormula 
            {
              Formula RESULT =null;
		int cpfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexFormula cpf = (ComplexFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpxFormula(cpfleft, cpf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= compoundFormula 
            {
              Formula RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundFormula cf = (CompoundFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpFormula(cfleft, cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= atomicFormula 
            {
              Formula RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AtomicFormula af = (AtomicFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtFormula(afleft, af); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentence ::= formula 
            {
              Sentence RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Sentence(fleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentence start_val = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

